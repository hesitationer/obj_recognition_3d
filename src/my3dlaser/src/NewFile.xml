<?xml version="1.0" encoding="UTF-8"?>
<launch>
	<master auto="start"/>
	
	<rosparam file="$(find nimbro_launch)/config/global_parameters_dyna2.yaml" command="load" />
	

	/*******************************************************************************************************************/
         <!-- cloud preprocessor -->
	<node pkg="nimbro_cloud_processing" type="cloud_preprocessor_node" name="cloud_preprocessor_node" output="screen">

	<!-- INPUT CLOUD -->
	<param name="input_cloud_topic" value="/tilt_scan_pointcloud" />
	<param name="dump_input_cloud" value="false" />

	<!-- OUTPUT CLOUD -->
	<param name="output_cloud_topic" value="/cloud_preprocessed" />
	<param name="publish_output_cloud" value="true" />
	<param name="dump_output_cloud" value="false" />
	<!--    <param name="output_cloud_coloring" value="distance_intensity" /> -->

	<!-- SAMPLED OUTPUT CLOUD -->
	<param name="sampled_output_cloud_topic" value="/cloud_preprocessed_sampled" />
	<param name="publish_subsampled_cloud" value="false" />
	<param name="dump_sampled_output_cloud" value="false" />
	<param name="output_subsampling_method" value="none" />
	<param name="output_subsampling_voxelsize_x" value="0.06" />
	<param name="output_subsampling_voxelsize_y" value="0.06" />
	<param name="output_subsampling_voxelsize_z" value="0.06" />
	<!--    <param name="output_cloud_coloring" value="distance_intensity" /> -->

	<!-- subsampling before processing (not done when using faked nearest neighbor search) -->
	<param name="use_faked_nearest_neighbor_search" value="false" />
	<param name="number_neighbors" value="80" />
	<param name="max_distance_to_neighbors" value="0.2" />

	<param name="use_presampling" value="false" />
	<param name="presampling_voxelsize_x" value="0.03" />
	<param name="presampling_voxelsize_y" value="0.03" />
	<param name="presampling_voxelsize_z" value="0.03" />

	<param name="use_euclidean_clustering" value="false" />
	<param name="exact_clustering" value="true" />

	<param name="min_table_height" value="0.60" /> <!-- minimum height of table (w.r.t. ground plane, z=0) -->
	<param name="max_table_height" value="1.10" /> <!-- maximum height of table (w.r.t. ground plane, z=0) -->
	<param name="max_object_height" value="0.30" /> <!-- maximum height of objects (w.r.t. table plane) -->

	<param name="object_clustering_distance_deviation" value="0.04" /> <!-- max distance between connected points -->
	<param name="object_clustering_angle_deviation" value="20.0" /> <!-- max angle deviation between normals of connected points -->
	<param name="object_clustering_min_points" value="250" /> <!-- minimum number of points per cluster -->

	<remap from="/cloud_preprocessor_node/swiss_object_data" to="/multi_object_tracker/object_detections" />

	</node>

	<node launch-prefix="" pkg="nimbro_objectperception" type="multi_object_tracker_node" name="multi_object_tracker" respawn="true" >
	<remap from="/multi_object_tracker/object_tracks" to="/robotvision/objecttracks" />
	</node>

	/*******************************************************************************************************************/
	
	<!-- Pointcloud expected on /tilt_scan_pointcloud -->
	<!-- tf expected on /tf -->
	
	<node pkg="nodelet" type="nodelet" name="pcl_manager" args="manager" output="screen" />
	
	<!-- PointCloud/PointCloud2 converter -->
	<node pkg="point_cloud_converter" type="point_cloud_converter" name="tilt_scan_point_cloud_converter" output="screen">
		<!-- <remap from="/points_in" to="/tilt_scan_pointcloud" /> -->
		<remap from="/points_in" to="/cloud_preprocessor_node/outputSingleObjects" />
		<remap from="/points2_out" to="/tilt_scan/pointcloud2" />
	</node>
	
	<!-- Downsample to voxel grid -->
	<node pkg="nodelet" type="nodelet" name="voxel_grid" args="load pcl/VoxelGrid pcl_manager" output="screen">
		<remap from="/voxel_grid/input" to="/tilt_scan/pointcloud2" />
		<remap from="/voxel_grid/output" to="/tilt_scan/voxel_grid" />
<rosparam>
leaf_size: 0.03
</rosparam>
	</node>
	

	<node pkg="nodelet" type="nodelet" name="normal_estimation" args="load pcl/NormalEstimation pcl_manager" output="screen">
		<remap from="/normal_estimation/input" to="/tilt_scan/voxel_grid" />
		<remap from="/normal_estimation/output" to="/tilt_scan/normals" />
		<rosparam>
# -[ Mandatory parameters
k_search: 0
radius_search: 0.08
max_queue_size: 100
# Set the spatial locator. Possible values are: 0 (ANN), 1 (FLANN), 2 (organized)
spatial_locator: 0
use_indices: false
use_surface: false
</rosparam>
	</node>

	
	
<node pkg="nodelet" type="nodelet" name="fpfh_estimation" args="load pcl/FPFHEstimation pcl_manager" output="screen">
		<remap from="/fpfh_estimation/input" to="/tilt_scan/voxel_grid" />
		<remap from="/fpfh_estimation/normals" to="/tilt_scan/normals" />
		<remap from="/fpfh_estimation/output" to="/tilt_scan/output_fpfh" />
		<rosparam>
# -[ Mandatory parameters
#k_search: 0
radius_search: 0.08
max_queue_size: 100
# Set the spatial locator. Possible values are: 0 (ANN), 1 (FLANN), 2 (organized)
spatial_locator: 0
use_indices: false
use_surface: false
</rosparam>
	
	</node>

<node pkg="nodelet" type="nodelet" name="pointcloudanalyser" args="load my3dlaser/PointCloudAnalyser pcl_manager" output="screen">

	<remap from="/pcanalyser/input" to="tilt_scan/output_fpfh" />
	<remap from="/pcanalyser/output" to="/tilt_scan/analyseroutput" />
        <rosparam>
max_queue_size: 100
# Set the spatial locator. Possible values are: 0 (ANN), 1 (FLANN), 2 (organized)
use_indices: false
</rosparam>
</node>


	
</launch>